// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  reputation    Float     @default(1.0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts       Account[]
  sessions       Session[]
  emotionEntries EmotionEntry[]
  milestones     UserMilestone[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum EmotionType {
  JOY
  SERENITY
  SURPRISE
  NOSTALGIA
  FEAR
  SADNESS
  ANGER
  HOPE
  GRATITUDE
  ANXIETY
}

enum VisibilityType {
  PUBLIC
  AFFINE
  PRIVATE
}

enum SeasonType {
  SPRING
  SUMMER
  AUTUMN
  WINTER
}

enum ThemeType {
  MEMORY
  REBIRTH
  CONTEMPLATION
  CELEBRATION
  INTROSPECTION
  CONNECTION
}

model EmotionEntry {
  id           String         @id @default(cuid())
  userId       String
  h3Index      String         // H3 cell index
  emotion      EmotionType
  intensity    Int            @db.SmallInt // 0-100
  valence      Float          // -1.0 to 1.0
  tags         String[]       @default([])
  note         String?        @db.VarChar(280)
  dwellSeconds Int            @default(0)
  gpsAccuracy  Int            @default(10) // meters
  visibility   VisibilityType @default(PUBLIC)
  ttlHours     Int?           // Time to live for volatile emotions
  expiresAt    DateTime?      // Computed from ttlHours
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([h3Index, createdAt])
  @@index([userId, createdAt])
  @@index([expiresAt])
  @@map("emotion_entries")
}

model EmotionAggregate {
  h3Index         String      @id
  updatedAt       DateTime    @updatedAt
  dominantEmotion EmotionType
  meanValence     Float       // -1.0 to 1.0
  meanIntensity   Float       // 0-100
  distribution    Json        // Emotion distribution as percentages
  coherence       Float       // How much emotions agree (0-1)
  trend           Float       // Recent change in valence (-1 to 1)
  entryCount      Int         @default(0)
  lastEntryAt     DateTime?

  @@map("emotion_aggregates")
}

model SeasonalCycle {
  id        String    @id @default(cuid())
  season    SeasonType
  theme     ThemeType
  startDate DateTime
  endDate   DateTime
  bias      Json      // Emotion bias weights
  isActive  Boolean   @default(false)
  createdAt DateTime  @default(now())

  @@map("seasonal_cycles")
}

model NarrativeLink {
  id           String      @id @default(cuid())
  h3Index      String
  timeStart    DateTime
  timeEnd      DateTime
  emotionFrom  EmotionType
  emotionTo    EmotionType
  rationale    String      @db.Text
  strength     Float       @default(1.0) // How strong the connection is
  createdAt    DateTime    @default(now())

  @@index([h3Index, timeStart])
  @@map("narrative_links")
}

model UserMilestone {
  id           String   @id @default(cuid())
  userId       String
  occurredAt   DateTime
  summary      String   @db.Text
  deltaValence Float    // Change in valence that triggered this milestone
  h3Index      String?  // Optional location where milestone occurred
  createdAt    DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, occurredAt])
  @@map("user_milestones")
}
